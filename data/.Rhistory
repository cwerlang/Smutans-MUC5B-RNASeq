1+1
run hello world
1+1
#learning to use print function
print("hello, world")
getwed()
getwd()
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
x<-3
y<-5
x
y
(s<-x+y)
x = 10.5 # assign a decimal value
x # print the value of x
class(x) # print the class name of x
k=1
k # print the value of k
class(k) # print the class name of k
is.integer(k) # is k an integer?
1+2
1+2*3+4*5
group1<-c(4.5,4.7,4.2,4.8,3.9)
group2<-c(6.0,5.9,5.8,5.5,6.2)
t.test(group1,group2)
# Load libraries
library(Biobase)
# Setup directory variables
baseDir <- getwd()
dataDir <- file.path(baseDir, "data")
# Load data
design_dat <- read.table(file.path(dataDir, 'mouse_exp_design.csv'), header=T, sep=",", row.names=1)
# Setup directory variables
baseDir <- getwd()
dataDir <- file.path(baseDir, "data")
# Load data
design_dat <- read.table(file.path(dataDir, 'mouse_exp_design.csv'), header=T, sep=",", row.names=1)
knitr::opts_chunk$set(echo = TRUE)
# Setup directory variables
baseDir <- getwd()
dataDir <- file.path(baseDir, "data")
# Load data
design_dat <- read.table(file.path(dataDir, 'mouse_exp_design.csv'), header=T, sep=",", row.names=1)
View(design_dat)
## install and update packages
install.packages("BiocManager")
install.packages("BiocManager")
BiocManager::install() #install core packages
BiocManager::install(c("ShortRead","easyRNASeq","Rsamtools",
"biomaRt","GenomicFeatures","GenomicAlignments","BiocParallel",
"DESeq2","magrittr","stringi","GenomicRanges"))
install.packages("stringi", dependencies=TRUE, INSTALL_opts = c('--no-lock')) ## genfeat
## load libraries
library("BiocParallel")
library("Rsamtools")
library(rstudioapi)
library("GenomicAlignments")
library("GenomicFeatures")
library("GenomicRanges")
library( "DESeq2" )
## ----- Set Directory --------
## If you save this R script as the same folder as your indexed/mapped ...
## bam files, then you don't have to change anything here.
mainwd <-dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(mainwd)
setwd("~/Dropbox (MIT)/RNASEQ")
## ----- Set Directory --------
## If you save this R script as the same folder as your indexed/mapped ...
## bam files, then you don't have to change anything here.
mainwd <-dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(mainwd)
# read in job info table
jobinfotable <- read.csv('0-setjobdirectory.csv',row.names=1, stringsAsFactors = FALSE)
jobinfotable
# set job working directory
jobwd <- file.path(mainwd,jobinfotable$folder[[1]])
setwd(jobwd)
# set GFF file name
organisminfo <- read.csv(file.path(jobwd,'0-inputs','0-Organisminfo.csv'),row.names=1, stringsAsFactors = FALSE)
GFF_FILE <- file.path(jobwd,'0-inputs',organisminfo$filename[[1]])
file.exists(GFF_FILE)
## ----- Set Filenames & Load Samples-------
## you'll need to rename the Galaxy output (indexed bam files)
## to match the sample names in the csv file (example of sample table attached)
FILE_LIST <- "1-FileList_Galaxyoutput.csv"
OUTPUT_FILE <- file.path(jobwd,'outputs','1-RawReadCounts_Routput.csv')
BAMFILE_LOCATION <- file.path(jobwd,'1-mapped_bam')
# change csv file name here if needed, also make sure that Run column has correct names
csvfile <- file.path(jobwd, FILE_LIST)
sampleTable <- read.csv(csvfile, row.names = 1)
sampleTable
# check that our files were loaded correctly
filenames <- file.path(BAMFILE_LOCATION, paste0(sampleTable$sample, ".mapped.bam"))
file.exists(filenames)
# load the bam files as bam files (Rsamtools)
bamfiles <- BamFileList(filenames, yieldSize=100000)
# show sequence info of bam files
seqinfo(bamfiles[1])
txdb <- makeTxDbFromGFF(GFF_FILE, format = "gff3", circ_seqs = character())
txdb
## ------------------------------------------------------------------------
cbt <- cdsBy(txdb, "tx") #converts txdb to CompressedGRangesList
cbt
ids<-id2name(txdb,feature.type="cds")
head(ids)
cbt@partitioning@NAMES <-ids
View(cbt)
cbt@elementMetadata@rownames <- ids
View(cbt)
dim(ids)
ids
size(ids)
head(ids)
cbt@unlistData@elementMetadata@listData@cds_id <- ids
class(ids)
class(cbt@unlistData@elementMetadata@listData@cds_id)
gr <- GRanges(
seqnames = Rle(c("NC_004350.2"),c(1)),
ranges = IRanges(62583,62663),
strand = Rle(strand(c("+")), c(1)),
cds_id = 3000,
cds_name = "comS",
exon_rank = 1
)
se <- summarizeOverlaps(features=c(cbt,gr), reads=bamfiles,
mode="Union",
singleEnd=TRUE,
ignore.strand=TRUE,
fragments=FALSE, param=ScanBamParam())
se
dim(se)
assayNames(se)
head(assay(se), 12)
colSums(assay(se))
## write out mapped unnormalized sequencing reads
write.csv(assay(se),OUTPUT_FILE)
dds <- DESeqDataSetFromMatrix(countData = assay(se),
colData = sampleTable,
design= ~ condition)
dds <- DESeqDataSetFromMatrix(countData = assay(se),
colData = sampleTable,
design= ~ condition)
dds <- DESeq(dds)
resultsNames(dds) # lists the coefficients
res <- results(dds)
write.csv(res, file.path(jobwd,'outputs','2-DifferentialExpression'), quote=FALSE)
write.csv(res, file.path(jobwd,'outputs','2-DifferentialExpression.csv'), quote=FALSE)
View(res)
View(dds)
View(gr)
gr@partitioning@NAMES <-"comS"
gr@elementMetadata@rownames <- "comS"
se <- summarizeOverlaps(features=c(cbt,gr), reads=bamfiles,
mode="Union",
singleEnd=TRUE,
ignore.strand=TRUE,
fragments=FALSE, param=ScanBamParam())
# or to shrink log fold changes association with condition:
res <- lfcShrink(dds, coef="condition_MUC5BMucin_vs_Media", type="apeglm")
write.csv(res, file.path(jobwd,'outputs','2-DifferentialExpression_muc5b.csv'), quote=FALSE)
# or to shrink log fold changes association with condition:
res <- lfcShrink(dds, coef="condition_MUC5BGlycans_vs_Media", type="apeglm")
write.csv(res, file.path(jobwd,'outputs','2-DifferentialExpression_muc5bglycans.csv'), quote=FALSE)
